import 'package:equatable/equatable.dart';
import 'package:flutter_clean_architecture/domain/entities/weather/current.dart';

import 'condition_model.dart';

class CurrentModel extends Current {
  const CurrentModel({
    int? lastUpdatedEpoch,
    String? lastUpdated,
    double? tempC,
    double? tempF,
    int? isDay,
    ConditionModel? condition,
    double? windMph,
    double? windKph,
    int? windDegree,
    String? windDir,
    double? pressureMb,
    double? pressureIn,
    double? precipMm,
    double? precipIn,
    int? humidity,
    int? cloud,
    double? feelslikeC,
    double? feelslikeF,
    double? visKm,
    double? visMiles,
    double? uv,
    double? gustMph,
    double? gustKph,
  }) : super(
          lastUpdatedEpoch: lastUpdatedEpoch,
          lastUpdated: lastUpdated,
          tempC: tempC,
          tempF: tempF,
          isDay: isDay,
          condition: condition,
          windMph: windMph,
          windKph: windKph,
          windDegree: windDegree,
          windDir: windDir,
          pressureMb: pressureMb,
          pressureIn: pressureIn,
          precipMm: precipMm,
          precipIn: precipIn,
          humidity: humidity,
          cloud: cloud,
          feelslikeC: feelslikeC,
          feelslikeF: feelslikeF,
          visKm: visKm,
          visMiles: visMiles,
          uv: uv,
          gustMph: gustMph,
          gustKph: gustKph,
        );

  factory CurrentModel.fromJson(Map<String, dynamic> json) => CurrentModel(
        lastUpdatedEpoch: json['last_updated_epoch'] as int?,
        lastUpdated: json['last_updated'] as String?,
        tempC: json['temp_c'] as double?,
        tempF: (json['temp_f'] as num?)?.toDouble(),
        isDay: json['is_day'] as int?,
        condition: json['condition'] == null
            ? null
            : ConditionModel.fromJson(
                json['condition'] as Map<String, dynamic>),
        windMph: (json['wind_mph'] as num?)?.toDouble(),
        windKph: (json['wind_kph'] as num?)?.toDouble(),
        windDegree: json['wind_degree'] as int?,
        windDir: json['wind_dir'] as String?,
        pressureMb: json['pressure_mb'] as double?,
        pressureIn: (json['pressure_in'] as num?)?.toDouble(),
        precipMm: json['precip_mm'] as double?,
        precipIn: json['precip_in'] as double?,
        humidity: json['humidity'] as int?,
        cloud: json['cloud'] as int?,
        feelslikeC: (json['feelslike_c'] as num?)?.toDouble(),
        feelslikeF: json['feelslike_f'] as double?,
        visKm: json['vis_km'] as double?,
        visMiles: json['vis_miles'] as double?,
        uv: json['uv'] as double?,
        gustMph: (json['gust_mph'] as num?)?.toDouble(),
        gustKph: json['gust_kph'] as double?,
      );

  Map<String, dynamic> toJson() => {
        'last_updated_epoch': lastUpdatedEpoch,
        'last_updated': lastUpdated,
        'temp_c': tempC,
        'temp_f': tempF,
        'is_day': isDay,
        'condition': (condition as ConditionModel?)?.toJson(),
        'wind_mph': windMph,
        'wind_kph': windKph,
        'wind_degree': windDegree,
        'wind_dir': windDir,
        'pressure_mb': pressureMb,
        'pressure_in': pressureIn,
        'precip_mm': precipMm,
        'precip_in': precipIn,
        'humidity': humidity,
        'cloud': cloud,
        'feelslike_c': feelslikeC,
        'feelslike_f': feelslikeF,
        'vis_km': visKm,
        'vis_miles': visMiles,
        'uv': uv,
        'gust_mph': gustMph,
        'gust_kph': gustKph,
      };

  @override
  List<Object?> get props {
    return [
      lastUpdatedEpoch,
      lastUpdated,
      tempC,
      tempF,
      isDay,
      condition,
      windMph,
      windKph,
      windDegree,
      windDir,
      pressureMb,
      pressureIn,
      precipMm,
      precipIn,
      humidity,
      cloud,
      feelslikeC,
      feelslikeF,
      visKm,
      visMiles,
      uv,
      gustMph,
      gustKph,
    ];
  }
}
